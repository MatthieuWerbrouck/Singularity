-- Module Administration & R√¥les - Singularity
-- √Ä ajouter apr√®s le sch√©ma de base

-- ============================================================================
-- SYST√àME DE R√îLES ET PERMISSIONS
-- ============================================================================

-- Table des r√¥les
CREATE TABLE public.roles (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    display_name TEXT NOT NULL,
    description TEXT,
    level INTEGER NOT NULL DEFAULT 0, -- Niveau hi√©rarchique (0 = guest, 100 = super_admin)
    color TEXT DEFAULT '#6366f1',
    icon TEXT DEFAULT 'üë§',
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Table des permissions
CREATE TABLE public.permissions (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    display_name TEXT NOT NULL,
    description TEXT,
    module TEXT NOT NULL, -- 'admin', 'finances', 'tasks', etc.
    action TEXT NOT NULL, -- 'read', 'write', 'delete', 'manage'
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Table de liaison r√¥les-permissions
CREATE TABLE public.role_permissions (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    role_id UUID REFERENCES public.roles(id) ON DELETE CASCADE NOT NULL,
    permission_id UUID REFERENCES public.permissions(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(role_id, permission_id)
);

-- Ajout du r√¥le dans la table profiles (apr√®s migration-profiles.sql)
ALTER TABLE public.profiles 
ADD COLUMN IF NOT EXISTS role_id UUID,
ADD COLUMN IF NOT EXISTS is_super_admin BOOLEAN DEFAULT false;

-- Ajouter la contrainte de cl√© √©trang√®re si elle n'existe pas
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'profiles_role_id_fkey' 
        AND table_name = 'profiles'
    ) THEN
        ALTER TABLE public.profiles 
        ADD CONSTRAINT profiles_role_id_fkey 
        FOREIGN KEY (role_id) REFERENCES public.roles(id);
    END IF;
END $$;

-- ============================================================================
-- DONN√âES INITIALES DES R√îLES
-- ============================================================================

-- Insertion des r√¥les par d√©faut
INSERT INTO public.roles (name, display_name, description, level, color, icon) VALUES
('super_admin', 'Super Administrateur', 'Acc√®s complet √† tout le syst√®me', 100, '#dc2626', 'üëë'),
('admin', 'Administrateur', 'Gestion des utilisateurs et modules', 80, '#ea580c', 'üõ†Ô∏è'),
('manager', 'Manager', 'Acc√®s √©tendu aux modules, analytics', 60, '#3b82f6', 'üë®‚Äçüíº'),
('user', 'Utilisateur', 'Acc√®s standard aux modules personnels', 40, '#10b981', 'üë§'),
('guest', 'Invit√©', 'Acc√®s limit√© en lecture seule', 20, '#6b7280', 'üëÅÔ∏è');

-- ============================================================================
-- PERMISSIONS PAR MODULE
-- ============================================================================

-- Permissions Administration
INSERT INTO public.permissions (name, display_name, description, module, action) VALUES
('admin.users.read', 'Voir les utilisateurs', 'Consulter la liste des utilisateurs', 'admin', 'read'),
('admin.users.write', 'G√©rer les utilisateurs', 'Cr√©er/modifier les utilisateurs', 'admin', 'write'),
('admin.users.delete', 'Supprimer les utilisateurs', 'Supprimer des comptes utilisateurs', 'admin', 'delete'),
('admin.roles.manage', 'G√©rer les r√¥les', 'Cr√©er/modifier/supprimer des r√¥les', 'admin', 'manage'),
('admin.system.config', 'Configuration syst√®me', 'Acc√®s aux param√®tres syst√®me', 'admin', 'manage');

-- Permissions Finances
INSERT INTO public.permissions (name, display_name, description, module, action) VALUES
('finances.own.read', 'Voir ses finances', 'Consulter ses propres donn√©es financi√®res', 'finances', 'read'),
('finances.own.write', 'G√©rer ses finances', 'Cr√©er/modifier ses donn√©es financi√®res', 'finances', 'write'),
('finances.all.read', 'Voir toutes les finances', 'Consulter les finances de tous les utilisateurs', 'finances', 'read'),
('finances.reports', 'Rapports financiers', 'Acc√®s aux rapports et analytics financiers', 'finances', 'read');

-- Permissions T√¢ches
INSERT INTO public.permissions (name, display_name, description, module, action) VALUES
('tasks.own.read', 'Voir ses t√¢ches', 'Consulter ses propres t√¢ches', 'tasks', 'read'),
('tasks.own.write', 'G√©rer ses t√¢ches', 'Cr√©er/modifier ses t√¢ches', 'tasks', 'write'),
('tasks.team.read', 'Voir t√¢ches √©quipe', 'Consulter les t√¢ches partag√©es', 'tasks', 'read'),
('tasks.team.write', 'G√©rer t√¢ches √©quipe', 'G√©rer les t√¢ches partag√©es', 'tasks', 'write');

-- Permissions Analytics
INSERT INTO public.permissions (name, display_name, description, module, action) VALUES
('analytics.own.read', 'Ses statistiques', 'Voir ses propres statistiques', 'analytics', 'read'),
('analytics.global.read', 'Statistiques globales', 'Voir les statistiques de tous les utilisateurs', 'analytics', 'read');

-- ============================================================================
-- ATTRIBUTION DES PERMISSIONS AUX R√îLES
-- ============================================================================

-- Super Admin : Toutes les permissions
INSERT INTO public.role_permissions (role_id, permission_id)
SELECT r.id, p.id 
FROM public.roles r, public.permissions p 
WHERE r.name = 'super_admin';

-- Admin : Gestion utilisateurs + acc√®s complet modules
INSERT INTO public.role_permissions (role_id, permission_id)
SELECT r.id, p.id 
FROM public.roles r, public.permissions p 
WHERE r.name = 'admin' 
AND (p.module IN ('admin', 'finances', 'tasks', 'analytics') OR p.action != 'delete');

-- Manager : Acc√®s √©tendu sans gestion utilisateurs
INSERT INTO public.role_permissions (role_id, permission_id)
SELECT r.id, p.id 
FROM public.roles r, public.permissions p 
WHERE r.name = 'manager' 
AND p.module != 'admin' 
AND p.name NOT LIKE '%.all.%';

-- User : Acc√®s personnel uniquement
INSERT INTO public.role_permissions (role_id, permission_id)
SELECT r.id, p.id 
FROM public.roles r, public.permissions p 
WHERE r.name = 'user' 
AND p.name LIKE '%.own.%';

-- Guest : Lecture seule de ses propres donn√©es
INSERT INTO public.role_permissions (role_id, permission_id)
SELECT r.id, p.id 
FROM public.roles r, public.permissions p 
WHERE r.name = 'guest' 
AND p.name LIKE '%.own.read';

-- ============================================================================
-- RLS ET S√âCURIT√â
-- ============================================================================

-- Activation RLS sur les nouvelles tables
ALTER TABLE public.roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.role_permissions ENABLE ROW LEVEL SECURITY;

-- Politiques pour roles (visible par tous, modifiable par admins seulement)
CREATE POLICY "Roles are visible to all authenticated users" ON public.roles
    FOR SELECT TO authenticated USING (true);

CREATE POLICY "Only admins can manage roles" ON public.roles
    FOR ALL TO authenticated 
    USING (
        EXISTS (
            SELECT 1 FROM public.profiles p
            JOIN public.roles r ON p.role_id = r.id
            WHERE p.id = auth.uid() AND (r.level >= 80 OR p.is_super_admin = true)
        )
    );

-- Politiques similaires pour permissions et role_permissions
CREATE POLICY "Permissions are visible to all authenticated users" ON public.permissions
    FOR SELECT TO authenticated USING (true);

CREATE POLICY "Role permissions are visible to all authenticated users" ON public.role_permissions
    FOR SELECT TO authenticated USING (true);

-- ============================================================================
-- FONCTIONS UTILITAIRES
-- ============================================================================

-- Fonction pour v√©rifier si un utilisateur a une permission
CREATE OR REPLACE FUNCTION public.user_has_permission(user_id UUID, permission_name TEXT)
RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 
        FROM public.profiles p
        LEFT JOIN public.roles r ON p.role_id = r.id
        LEFT JOIN public.role_permissions rp ON r.id = rp.role_id
        LEFT JOIN public.permissions perm ON rp.permission_id = perm.id
        WHERE p.id = user_id 
        AND (perm.name = permission_name OR p.is_super_admin = true)
        AND p.status = 'active'
        AND r.is_active = true
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Fonction pour obtenir le niveau d'un utilisateur
CREATE OR REPLACE FUNCTION public.user_level(user_id UUID)
RETURNS INTEGER AS $$
DECLARE
    user_level INTEGER;
BEGIN
    SELECT COALESCE(r.level, 0) INTO user_level
    FROM public.profiles p
    LEFT JOIN public.roles r ON p.role_id = r.id
    WHERE p.id = user_id;
    
    RETURN COALESCE(user_level, 0);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger pour updated_at sur roles
CREATE TRIGGER roles_updated_at
    BEFORE UPDATE ON public.roles
    FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

-- ============================================================================
-- CR√âATION DU PREMIER SUPER ADMIN
-- ============================================================================

-- ‚ö†Ô∏è IMPORTANT: Apr√®s avoir cr√©√© votre premier compte utilisateur,
-- ex√©cutez cette requ√™te en rempla√ßant 'votre@email.com' :

/*
UPDATE public.profiles 
SET 
    role_id = (SELECT id FROM public.roles WHERE name = 'super_admin'),
    is_super_admin = true 
WHERE email = 'votre@email.com';
*/